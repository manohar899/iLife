(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Rows' object has no attribute 'Tag'"
p3
sS'layer'
p4
S'/home/manohar/web2py/applications/iLife/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nfrom datetime import datetime\n@auth.requires_login()\ndef index():\n    q1 = db.Journal_Events.created_by == session.auth.user.id\n    rows = db(q1).select(orderby = db.Journal_Events.created_on)\n    #shared = db(db.Tag.post==db.Journal_Events.id & db.tagged==session.auth.user.id).select()\n    shares = []\n    shared = db(db.Tag).select(join=db.Journal_Events.on(db.Tag.post==db.Journal_Events.id))\n    for share in shared:\n        if shared.Tag.tagged == session.auth.user.id:\n            shares.append()\n    years = {}\n    for row in rows:\n        years[row.created_on.year] = \'1\'\n    yrs = years.keys()\n    yrs.sort()\n    return locals()\n\n@auth.requires_login()\ndef displayDetails():\n    q1 = db.Journal_Events.created_by == session.auth.user.id\n    rows = db(q1).select(orderby = db.Journal_Events.created_on)\n    #rows = db(db.Journal_Events).select(q1)\n    desc=[]\n    i = 0\n    for row in rows:\n        string = row.Description[0:50]+"......."\n        desc.append(string)\n    return locals()\n\n@auth.requires_login()\ndef createJournal():\n    form = SQLFORM(db.Journal_Events).process()\n    rows = db(db.Journal_Events).select()\n    if form.accepted:\n        session.last_id = form.vars.id\n        redirect(URL(\'share_journals\'))\n    elif form.errors:\n        response.flash = "Form Has Errors"\n    else:\n        response.flash = "Form First time displayed"\n    return locals()\n\n\n@auth.requires_login()\ndef share_journals():\n    q1 = db.Journal_Events.id == session.last_id\n    q2 = db.auth_user.id != session.auth.user.id\n    rows = db(q1).select()\n    users = db(q2).select()\n    return locals()\n\n@auth.requires_login()\ndef search():\n    form = SQLFORM.grid(db.Journal_Events)\n    return locals()\n\ndef monthSelect():\n    session.year = request.args[0]\n    q1 = db.Journal_Events.created_on >= datetime(int(session.year),1,1)\n    rows = db(q1).select()\n    months = {}\n    for row in rows:\n        months[row.created_on.month] = \'a\'\n    mnts = months.keys()\n    mnts.sort()\n    monthName = {1:"January",2:"February",3:"March",4:"April",5:"May",6:"June",7:"July",8:"August",9:"September",10:"October",11:"November",12:"December"}\n    return locals()\n\n@auth.requires_login()\ndef displayJournal():\n    q1 = db.Journal_Events.created_on >= datetime(int(session.year),int(request.args[0]),1)\n    q2 = db.Journal_Events.created_by == session.auth.user.id\n    rows = db(q1 & q2).select()\n    #form = SQLFORM.grid(q1 & q2).select()\n    #response.flash = q1\n    c = 0\n    for row in rows:\n        c = 1\n    return locals()\n\ndef getDetails():\n    q1 = db.Journal_Events.id == request.args[0]\n    row = db(q1).select()\n    return locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef addShare():\n    shared_by = session.auth.user.id\n    shared_to = int(request.vars.selector)\n    post_id = session.last_id\n    q1 = db.Tag.tagged == shared_to\n    q2 = db.Tag.post == post_id\n    rows = db(q1 & q2).select()\n    if len(rows)==0:\n        if db.Tag.insert(tagged_by=shared_by,tagged = shared_to,post = post_id):\n            return "Shared"\n        else:\n            return "Unable to share try again"\n    else:\n        return "Already shared with that person"\n    #return "Hello"\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/manohar/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/manohar/web2py/applications/iLife/controllers/default.py", line 149, in <module>\n  File "/home/manohar/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/manohar/web2py/gluon/tools.py", line 3774, in f\n    return action(*a, **b)\n  File "/home/manohar/web2py/applications/iLife/controllers/default.py", line 19, in index\n    if shared.Tag.tagged == session.auth.user.id:\nAttributeError: \'Rows\' object has no attribute \'Tag\'\n'
p11
s.